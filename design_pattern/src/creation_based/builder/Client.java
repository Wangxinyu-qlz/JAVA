package creation_based.builder;

/**
 * @program: Java
 * @author: Qiaolezi
 * @create: 2024-08-13 15:47
 * @description: 生成器 建造者模式
 * 隐藏创建对象的建造过程 & 细节，
 * 使得用户在不知对象的建造过程 & 细节的情况下，
 * 就可直接创建复杂的对象
 *
 * 1.用户只需要给出指定复杂对象的类型和内容；
 * 2.建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来)
 *
 *
 * 作用（解决的问题）
 *      降低创建复杂对象的复杂度
 *      隔离了创建对象的构建过程 & 表示
 * 从而：
 *      方便用户创建复杂的对象（不需要知道实现过程）
 *      代码复用性 & 封装性（将对象构建过程和细节进行封装 & 复用）
 *
 * 优点
 * 1.易于解耦
 *      将产品本身与产品创建过程进行解耦，可以使用相同的创建过程来得到不同的产品。也就说细节依赖抽象。
 * 2.易于精确控制对象的创建
 *      将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰
 * 3.易于拓展
 *      增加新的具体建造者无需修改原有类库的代码，易于拓展，符合“开闭原则“。
 *
 * 缺点：
 *      1.建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；
 *      如果产品之间的差异性很大，则不适合使用建造者模式，
 *      因此其使用范围受到一定的限制。
 *      2.如果产品的内部变化复杂，
 *      可能会导致需要定义很多具体建造者类来实现这种变化，
 *      导致系统变得很庞大。
 **/
public class Client {
	public static void main(String[] args) {
		StringBuilder_ stringBuilder = new StringBuilder_();
		final int count = 16;

		for(int i = 0; i < count; i++) {
			stringBuilder.append((char) ('a' + i));
		}

		System.out.println(stringBuilder.toString());
	}
}
